// Code generated by mockery v2.12.1. DO NOT EDIT.

package mocks

import (
	model "ddd-proto/src/domain/model"

	mock "github.com/stretchr/testify/mock"

	testing "testing"
)

// BookRepositoryContract is an autogenerated mock type for the BookRepositoryContract type
type BookRepositoryContract struct {
	mock.Mock
}

// Create provides a mock function with given fields: book
func (_m *BookRepositoryContract) Create(book model.Book) error {
	ret := _m.Called(book)

	var r0 error
	if rf, ok := ret.Get(0).(func(model.Book) error); ok {
		r0 = rf(book)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetBookById provides a mock function with given fields: id
func (_m *BookRepositoryContract) GetBookById(id int) (model.Book, error) {
	ret := _m.Called(id)

	var r0 model.Book
	if rf, ok := ret.Get(0).(func(int) model.Book); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(model.Book)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewBookRepositoryContract creates a new instance of BookRepositoryContract. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewBookRepositoryContract(t testing.TB) *BookRepositoryContract {
	mock := &BookRepositoryContract{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
